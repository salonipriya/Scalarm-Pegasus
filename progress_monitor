# Progress_Monitor Adapter Scalarm
#!/usr/bin/env ruby
# encoding: UTF-8
require 'json'

 ## Function to Parse Pegasus Analyzer output
   ## Parsing Result Format:
    # UNRDY READY   PRE  IN_Q  POST  DONE  FAIL %DONE STATE                                   
    # 14     0     0     1     0     2     0  11.8 Running  
class JSON_Parsing 
  def Parse(main_Dir)
    parsed_output = {}
    pegasus_status = `pegasus-status -l #{main_Dir}`
    flag = false
    pegasus_status.split("\n").each do |line|
      if line.include? "UNRDY"
        flag = true
      elsif (flag)
        summary = line.split  
        parsed_output["UNRDY"] = summary[0]
        parsed_output["READY"] = summary[1]
        parsed_output["PRE"] = summary[2]
        parsed_output["IN_Q"] = summary[3]
        parsed_output["POST"] = summary[4]
        parsed_output["DONE"] = summary[5]
        parsed_output["FAIL"] = summary[6]
        parsed_output["%DONE"] = summary[7]
        parsed_output["STATE"] = summary[8]
        flag = false
      end
    end
    return parsed_output
  end
end

def main

  # Get the location of the directory created on-fly at Pegasus start time: (Dir location stored via Executor Adapter)
  dir = ""
  if File.exist?('location.txt') 
      File.open("location.txt") do |file|
          file.each do |line|
            dir = dir << line
          end
      end
  end

  if dir!=""
    newObj = JSON_Parsing.new
    # Result: The json output comprises of the Pegasus analyzer output parsed in necessary format
    IO.write 'intermediate_result.json', { status: 'ok', results: newObj.Parse(dir) }.to_json
    sleep (0.5)
  end
end

main
