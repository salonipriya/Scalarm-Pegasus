#!/usr/bin/env ruby
# encoding: UTF-8
require 'json'

# Parse the Status 
class JSON_Parsing 
  def Parse(main_Dir)
    parsed_output = {}
    pegasus_status = `pegasus-status -l #{main_Dir}`

    # pegasus_status = pegasus_status.force_encoding("BINARY")
    # pegasus_status.encode("UTF-8", invalid: :replace, undef: :replace)

    # split_at = "\\n"
    # split_at = split_at.force_encoding("BINARY")
    # split_at = split_at.encode('utf-8', :invalid => :replace, :undef => :replace, :replace => '_')

    #puts "STATUS"
    flag = false
    pegasus_status.split("\n").each do |line|
      if line.include? "UNRDY"
        flag = true
      elsif (flag)
        summary = line.split  
        parsed_output["UNRDY"] = summary[0]
        parsed_output["READY"] = summary[1]
        parsed_output["PRE"] = summary[2]
        parsed_output["IN_Q"] = summary[3]
        parsed_output["POST"] = summary[4]
        parsed_output["DONE"] = summary[5]
        parsed_output["FAIL"] = summary[6]
        parsed_output["%DONE"] = summary[7]
        parsed_output["STATE"] = summary[8]
        flag = false
      end
    end
    # puts parsed_output
    return parsed_output
  end
end

def main

  dir = ""
  if File.exist?('location.txt') 
      File.open("location.txt") do |file|
          file.each do |line|
            dir = dir << line
          end
      end
  end

  if dir!=""
    newObj = JSON_Parsing.new
    newObj.Parse(dir)
    # result = result.force_encoding("ISO-8859-1").encode("UTF-8")
    IO.write 'intermediate_result.json', { status: 'ok', results: newObj.Parse(dir) }.to_json
    sleep (0.5)
  end

end

main
