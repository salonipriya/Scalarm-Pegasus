#!/usr/bin/env ruby
# encoding: UTF-8
require 'json'

class NewWorkFlow
  attr_reader :status
  attr_accessor :workflow_label, :submit_dir
  @base_Dir = String.new

  def initialize(config_to_run, dir)
    @config_to_run = config_to_run
    @dir = dir
    @submit_dir = "/data/scratch/rafsilva/workflow/genome"
    @workflow_label = "genomeOutput"
  end

# def to_utf8(str)
#   # str = str.force_encoding("UTF-8")
#   # return str if str.valid_encoding?
#   str = str.force_encoding("BINARY")
#   str.encode("UTF-8", invalid: :replace, undef: :replace)
#   return str
# end

# Encode Special Character
# def to_utf8_specialcharacter(str)
#     str = str.force_encoding("BINARY")
#     str = str.encode('utf-8', :invalid => :replace, :undef => :replace, :replace => '_')
#     return str
# end

  def start

    # print "Starting workflow with: '#{cmd}'"
    
    # generate-dax  <WORK_DIR>  <LANEFILE>  <BINSIZE>
    # @LANEFILE = "/data/scratch/rafsilva/workflow/genome/lanes/test_4000"
    # @BINSIZE = 100
    # @Work_DIR = "work"
    # TEST Next Week
 #    dir = ""
	#   if File.exist?('location.txt') 
	#       File.open("location.txt") do |file|
	#           file.each do |line|
	#             dir = dir << line
	#           end
	#       end
	#   end

	# if(dir != "")
	# @status = update_status
	#     if(@status == "Success")
	#     else 
	#     	puts "RUN"
	#     	`pegasus-run #{dir}`
	#     end
	# else
	cmd =["cd #{@submit_dir}","./generate-dax work /data/scratch/rafsilva/workflow/genome/lanes/test_4000 100"].join("; ")  
    # puts "Generate DAX output"
    # puts 
    %x[#{cmd}]
    cmd =["cd #{@submit_dir}","./plan-dax work execution"].join("; ")
    @base_Dir = %x[#{cmd}]
	# end
    # puts "Plan Dax RUN"
    # puts @base_Dir
  end

  def getBaseDir
    analyzer_Dir = ""
    lookFor = "/data/scratch/rafsilva/workflow/genome/work/rafsilva/pegasus/genome-dax/"
    @base_Dir.each_line do |line|
    if line.include? lookFor
      analyzer_Dir = line
      break if analyzer_Dir !=  ""
    end
    end
    a_Dir = analyzer_Dir.split(lookFor)
    lookFor << a_Dir[1]
    # Output check
    # puts lookFor
    if not File.exist?('location.txt')
	  open('location.txt', 'w') { |f|
	  f.puts lookFor
	}
	end
    return lookFor
  end

  def update_status
    lookFor = self.getBaseDir
    pegasus_status = `pegasus-status -l #{lookFor}`
    @status = parse_pegasus_status pegasus_status  
    return @status
  end

 def running?
    @status = update_status
    if(@status == "Running")
    	return true
    else 
    	return false
    end
  end

  def failed?
     @status = update_status
    if(@status == "Failure")
    	return true
    else 
    	return false
    end
  end

  def summary
  lookFor = self.getBaseDir
  # Analyzer cmd: Pegasus
  puts "Analyzer Data"
  puts `pegasus-analyzer -d #{lookFor}`
  end

  def full_results
  	outputs = {}
    # Analyzer Output
  	self.summary
    outputs
  end

# def tempfull_results
#   	outputs = {}
#     # Analyzer Output
#     # Specify the directory location properly
#   	intermediate_hash = JSON.parse( IO.read("intermediate_result.json", encoding:'utf-8') )
#   	outputs = intermediate_hash.deep_dup
#     outputs
#   end

  def parse_pegasus_status(status_output)

    parse_job_mode = false
    parse_summary_mode = false

    # status_output = to_utf8(status_output) 
    # split_at = to_utf8_specialcharacter("\\n")

    parse_summary_mode = false
    state = "Running"

    status_output.split("\n").each do |line|
      if line.start_with? "UNRDY"
        parse_summary_mode = true
      elsif parse_summary_mode
        summary = line.split
        state = summary[8]
        parse_summary_mode = false
      end
    end
    return state
  end
  

end #End Class


#== Main Script ==##
def main
  config_to_run = File.dirname(__FILE__)
  dir = File.dirname(__FILE__)

  workflow = NewWorkFlow.new(config_to_run, dir)
  workflow.start

  sleep 30

  # IO.write 'output.json', { status: 'ok', results: workflow.update_status }.to_json
 while (workflow.running?)
    sleep 10
  end

  sleep 60

    # Remove the on-fly create file
    File.delete("location.txt") if File.exist?("location.txt")

  if workflow.failed?
    IO.write 'output.json', { status: 'error', reason: status }.to_json
  else
    %x[mkdir #{workflow.workflow_label}]
    %x[tar czvf output.tar.gz --directory=/data/scratch/rafsilva/workflow/genome outputs/]
    sleep 30

    IO.write 'output.json', { status: 'ok', results: workflow.full_results }.to_json
  end
end

main
